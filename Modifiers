// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

contract PausibleToken {
    address public owner;
    bool public paused;
    mapping (address => uint) public balances;

    constructor() {
        owner = msg.sender;
        paused = false;
        balances[owner] = 1000;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "YOu're not the owner" );
        _;
    }

    modifier notPaused() {
        require(paused == false, "The contract is paused");
        _;
    }

    function pause() public onlyOwner{
        paused = true;
    }

    function unPause() public onlyOwner{
        paused = false;
    }

    function transfer(address to, uint amount) public notPaused{
        require(balances[msg.sender] >= amount, "Insufficient balance!!");

        balances[msg.sender] += amount;
        balances[to] -= amount;

    }
}

